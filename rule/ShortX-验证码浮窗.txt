{
  "facts": [{
    "@type": "type.googleapis.com/NotificationPosted",
    "record": {
      "contentText": "验证码|校验码|检验码|确认码|激活码|动态码|安全码|验证代码|校验代码|检验代码|激活代码|确认代码|动态代码|安全代码|登入码|认证码|识别码|短信口令|动态密码|交易码|上网密码|随机码|动态口令|驗證碼|校驗碼|檢驗碼|確認碼|激活碼|動態碼|驗證代碼|校驗代碼|檢驗代碼|確認代碼|激活代碼|動態代碼|登入碼|認證碼|識別碼|Code|code|CODE",
      "contentRegexOptions": "RegexMatchOptions_ContainsMatchIn"
    },
    "customContextDataKey": {
    },
    "id": "F-7009a4ff-4f50-48f9-b034-ffbc36a7ca5d"
  }],
  "actions": [{
    "@type": "type.googleapis.com/ExecuteJS",
    "expression": "importPackage(android.view);\nimportPackage(android.widget);\nimportPackage(android.content);\nimportPackage(android.os);\nimportPackage(android.graphics);\nimportClass(android.graphics.drawable.GradientDrawable);\nimportClass(android.graphics.PixelFormat);\nimportClass(android.view.WindowManager);\nimportClass(android.view.Gravity);\nimportClass(java.lang.Runnable);\nimportClass(java.lang.Thread);\nimportClass(android.view.MotionEvent);\nimportClass(android.text.TextUtils);\nimportClass(android.app.Instrumentation);\nimportClass(android.os.SystemClock);\n\nfunction showTypingBubble(opts) {\n    var wm \u003d context.getSystemService(Context.WINDOW_SERVICE);\n    var pm \u003d context.getPackageManager();\n    var delay \u003d opts.delay || 100;\n    var timeout \u003d opts.timeout || 3000;\n    var layout \u003d null; // 为 removeView 使用\n\n    // 自动提取验证码\n    var msgText \u003d opts.contentText || \"\";\n    var keywords \u003d [\n        \"验证码\", \"校验码\", \"检验码\", \"确认码\", \"激活码\", \"动态码\", \"安全码\", \"验证代码\", \"校验代码\",\n        \"检验代码\", \"激活代码\", \"确认代码\", \"动态代码\", \"安全代码\", \"登入码\", \"认证码\", \"识别码\",\n        \"短信口令\", \"动态密码\", \"交易码\", \"上网密码\", \"随机码\", \"动态口令\", \"驗證碼\", \"校驗碼\",\n        \"檢驗碼\", \"確認碼\", \"激活碼\", \"動態碼\", \"驗證代碼\", \"校驗代碼\", \"檢驗代碼\", \"確認代碼\",\n        \"激活代碼\", \"動態代碼\", \"登入碼\", \"認證碼\", \"識別碼\", \"Code\", \"code\", \"CODE\"\n    ];\n\n    var Pattern \u003d java.util.regex.Pattern;\n    var pattern \u003d Pattern.compile(\"((?\u003d.*[a-zA-Z])(?\u003d.{0,4}\\\\d)[a-zA-Z0-9]{4,8})|(\\\\d{4,8})\");\n    var matcher \u003d pattern.matcher(msgText);\n    var closestPinCode \u003d null;\n    var closestDistance \u003d 99999;\n\n    for (var i \u003d 0; i \u003c keywords.length; i++) {\n        var keyword \u003d keywords[i];\n        var keywordPosition \u003d msgText.indexOf(keyword);\n        while (keywordPosition !\u003d\u003d -1) {\n            while (matcher.find()) {\n                var pinCodePosition \u003d matcher.start();\n                var distance \u003d Math.abs(pinCodePosition - keywordPosition);\n                if (distance \u003c closestDistance) {\n                    closestDistance \u003d distance;\n                    closestPinCode \u003d matcher.group();\n                }\n            }\n            matcher.reset();\n            keywordPosition \u003d msgText.indexOf(keyword, keywordPosition + keyword.length);\n        }\n    }\n\n    var textToInput \u003d opts.text || closestPinCode;\n    if (!textToInput) return false;\n\n    var isDarkMode \u003d (context.getResources().getConfiguration().uiMode\n        \u0026 android.content.res.Configuration.UI_MODE_NIGHT_MASK)\n        \u003d\u003d\u003d android.content.res.Configuration.UI_MODE_NIGHT_YES;\n\n    function runOnUiThread(fn) {\n        new Handler(Looper.getMainLooper()).post(new Runnable({ run: fn }));\n    }\n\n    runOnUiThread(function () {\n        layout \u003d new LinearLayout(context);\n        layout.setOrientation(LinearLayout.HORIZONTAL);\n        layout.setPadding(35, 26, 35, 26);\n        layout.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);\n\n        var layoutParams \u003d new LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.MATCH_PARENT,\n            LinearLayout.LayoutParams.WRAP_CONTENT\n        );\n        layout.setLayoutParams(layoutParams);\n\n        var bg \u003d new GradientDrawable();\n        var textColor;\n        if (isDarkMode) {\n            bg.setColor(Color.parseColor(\"#343434\"));\n            textColor \u003d Color.WHITE;\n        } else {\n            bg.setColor(Color.parseColor(\"#FAFAFA\"));\n            textColor \u003d Color.BLACK;\n            bg.setStroke(2, Color.parseColor(\"#22000000\"));\n        }\n        bg.setCornerRadius(120);\n        layout.setBackground(bg);\n\n        var iconView \u003d new ImageView(context);\n        var iconSize \u003d 80;\n        var iconParams \u003d new LinearLayout.LayoutParams(iconSize, iconSize);\n        iconParams.setMargins(0, 0, 40, 0); // 图标和文字间距\n        iconView.setLayoutParams(iconParams);\n\n        try {\n            var icon \u003d pm.getApplicationIcon(opts.pkg);\n            iconView.setImageDrawable(icon);\n        } catch (e) {\n            iconView.setImageResource(android.R.drawable.sym_def_app_icon);\n        }\n        layout.addView(iconView);\n\n        var textView \u003d new TextView(context);\n        textView.setText(textToInput);\n        textView.setTextColor(textColor);\n        textView.setTextSize(18);\n        textView.setEllipsize(TextUtils.TruncateAt.END);\n        textView.setSingleLine(true);\n        layout.addView(textView);\n\n        layout.setOnTouchListener(new View.OnTouchListener({\n            onTouch: function (v, event) {\n                switch (event.getAction()) {\n                    case MotionEvent.ACTION_DOWN:\n                        downTime \u003d java.lang.System.currentTimeMillis();\n                        longPressTriggered \u003d false;\n                        return true;\n                    case MotionEvent.ACTION_MOVE:\n                        if (!longPressTriggered \u0026\u0026 java.lang.System.currentTimeMillis() - downTime \u003e\u003d 500) {\n                            longPressTriggered \u003d true;\n                            try { wm.removeView(layout); } catch (e) {}\n                            return true;\n                        }\n                        return false;\n                    case MotionEvent.ACTION_UP:\n                        if (longPressTriggered) return true;\n                        new Thread(new Runnable({\n                            run: function () {\n                                var instrumentation \u003d new Instrumentation();\n                                var chars \u003d textToInput.split(\u0027\u0027);\n                                for (var i \u003d 0; i \u003c chars.length; i++) {\n                                    instrumentation.sendStringSync(chars[i]);\n                                    SystemClock.sleep(delay);\n                                }\n                                runOnUiThread(function () {\n                                    try { wm.removeView(layout); } catch (e) {}\n                                });\n                            }\n                        })).start();\n                        return true;\n                }\n                return false;\n            }\n        }));\n\n        var displayMetrics \u003d context.getResources().getDisplayMetrics();\n        var screenWidth \u003d displayMetrics.widthPixels;\n        var screenHeight \u003d displayMetrics.heightPixels;\n        var width \u003d Math.floor(screenWidth *0.4);\n        var height \u003d Math.floor(width * 0.4);\n\n        var params \u003d new WindowManager.LayoutParams(\n            width,\n            height,\n            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,\n            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,\n            PixelFormat.TRANSLUCENT\n        );\n        params.gravity \u003d opts.gravity || (Gravity.TOP | Gravity.CENTER_HORIZONTAL);\n        params.x \u003d opts.x || 0;\n        params.y \u003d opts.y !\u003d null ? opts.y : Math.floor(screenHeight * 0.55);\n\n        wm.addView(layout, params);\n\n        // ✅ 超时兜底移除逻辑\n        new Thread(new Runnable({\n            run: function () {\n                Thread.sleep(timeout);\n                runOnUiThread(function () {\n                    try { wm.removeView(layout); } catch (e) {}\n                });\n            }\n        })).start();\n    });\n\n    return textToInput;\n}\nshowTypingBubble({\n    pkg: {pkgName}, // 图标包名\n    contentText: {contentText},\n    delay: 10,        // 每个字符间隔\n    timeout: 3000     // 最大保留时间\n});",
    "context": "CoroutineContext_UI",
    "customContextDataKey": {
    },
    "id": "A-8a96c434-5d4a-4b6d-9c88-b2a4d4ae7074"
  }],
  "id": "SHARE-rule-59081317-3cbb-4926-adce-0a5e80d1c08a",
  "lastUpdateTime": "1751243067515",
  "createTime": "1751242194775",
  "author": {
    "name": "nyehueh"
  },
  "title": "验证码浮窗",
  "description": "显示验证码浮窗，点击输入",
  "isEnabled": true,
  "hook": {
  },
  "quit": {
  },
  "versionCode": "1"
}
###------###
{"type":"rule"}